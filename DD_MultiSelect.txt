    <div class="col-md-3" id="TNamaAC">
        <input style="width:100%" id="testItems"
               data-role="multiselectbox"
               @*data-option-label="-PILIH-"*@
               data-text-field="COLUMN_NAME"
               data-value-field="COLUMN_NAME"
               data-bind="source: testItemSource, value: testItems , events: {change: selectAccrued}" />
    </div>
    <div class="col-md-2">
        <button class="text-red" id="getValButton" onclick="showTmpgrid()">Create Template Upload</button>
    </div>

<div id="dv_temp" class="row">
    <div id="grid"></div>
    <br />
    <input class="btn-dropbox" type="button" id="savebutton" value="Save Template" />
</div>



<script>






    // MultiSelectBox, Kendo Plugin
    // -----------------------------------------------------------
    (function ($) {
        var MultiSelectBox = window.kendo.ui.DropDownList.extend({

            init: function (element, options) {
                var me = this;
                // setup template to include a checkbox
                options.template = kendo.template(
                    kendo.format('<input type="checkbox" name="{0}" value="#= {1} #" />&nbsp;<label for="{0}">#= {2} #</label>',
                        element.id + "_option_" + options.dataValueField,
                        options.dataValueField,
                        options.dataTextField
                    )
                );
                // create drop down UI
                window.kendo.ui.DropDownList.fn.init.call(me, element, options);
                // setup change trigger when popup closes
                me.popup.bind('close', function () {
                    var values = me.ul.find(":checked")
                        .map(function () { return this.value; }).toArray();
                    // check for array inequality
                    if (values < me.selectedIndexes || values > me.selectedIndexes) {
                        me._setText();
                        me._setValues();
                        me.trigger('change', {});
                    }
                });
                me._setText();
            },

            options: {
                name: "MultiSelectBox"
            },

            selectedIndexes: [],

            _accessor: function (vals, idx) { // for view model changes
                var me = this;
                if (vals === undefined) {
                    return me.selectedIndexes;
                }
            },

            value: function (vals) {
                var me = this;
                if (vals === undefined) { // for view model changes
                    return me._accessor();
                } else { // for loading from view model
                    var checkboxes = me.ul.find("input[type='checkbox']");
                    if (vals.length > 0) {
                        // convert to array of strings
                        var valArray = $(vals.toJSON())
                            .map(function () { return this + ''; })
                            .toArray();
                        checkboxes.each(function () {
                            this.checked = $.inArray(this.value, valArray) !== -1;
                        });
                        me._setText();
                        me._setValues();
                    }
                }
            },

            _select: function (li) { }, // kills highlighting behavior
            _blur: function () { }, // kills popup-close-on-click behavior

            _setText: function () { // set text based on selections
                var me = this;
                var text = me.ul.find(":checked")
                    .map(function () { return $(this).siblings("label").text(); })
                    .toArray();
                if (text.length === 0 && me.options.optionLabel)
                    me.text(me.options.optionLabel);
                else
                    me.text(text.join(', '));
            },
            _setValues: function () { // set selectedIndexes based on selection
                var me = this;
                var values = me.ul.find(":checked")
                    .map(function () { return this.value; })
                    .toArray();
                me.selectedIndexes = values;
            }

        });

        window.kendo.ui.plugin(MultiSelectBox);

    })(jQuery);
    // ===========================================================

    // view model
    // -----------------------------------------------------------
    var testVM = kendo.observable({
        testItems: [],
        testItemSource: new kendo.data.DataSource({

           
                type: "json",
                transport: {
                    read: {
                        url: $("#urlPath").val() + "/CreateTemplateUploadAccrued/TampilkanTemplateAccrued",
                        contentType: "application/json",
                        type: "POST",
                        cache: false
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total"
                }
            
        }),
    });
    // ===========================================================

    $(document).ready(function () {
        kendo.bind($("#testView"), testVM);
    });




</script>